{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from \"mobx\";\nexport default class CarStore {\n  constructor() {\n    _defineProperty(this, \"carRegistry\", new Map());\n\n    _defineProperty(this, \"loading\", false);\n\n    _defineProperty(this, \"loadCars\", async cars => {\n      try {\n        console.log(cars);\n        cars.forEach(a => {\n          this.setActivity(a);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"getPost\", id => {\n      return this.carRegistry.get(id);\n    });\n\n    _defineProperty(this, \"setActivity\", a => {\n      this.carRegistry.set(a.id, a);\n    });\n\n    makeAutoObservable(this);\n  }\n\n  get groupedCars() {\n    var result = Array.from(this.carRegistry, ([id, value]) => ({\n      id,\n      value\n    })).sort(function (a, b) {\n      var dateA = new Date(a.value.createdDate).getTime();\n      var dateB = new Date(b.value.createdDate).getTime();\n      return dateA < dateB ? 1 : -1;\n    });\n    return result;\n  } // deletePost = async (id: number) => {\n  //     try {\n  //         const post = await agent.Posts.delete(id);\n  //         runInAction(() => {\n  //             this.postRegistry.delete(id)\n  //         })\n  //         var profile = dark.profileStore.profile as User\n  //         profile.posts.length--\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n}","map":{"version":3,"sources":["C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/stores/carStore.ts"],"names":["makeAutoObservable","CarStore","constructor","Map","cars","console","log","forEach","a","setActivity","error","id","carRegistry","get","set","groupedCars","result","Array","from","value","sort","b","dateA","Date","createdDate","getTime","dateB"],"mappings":";;AAAA,SAASA,kBAAT,QAAgD,MAAhD;AAIA,eAAe,MAAMC,QAAN,CAAe;AAG1BC,EAAAA,WAAW,GAAG;AAAA,yCAFA,IAAIC,GAAJ,EAEA;;AAAA,qCADJ,KACI;;AAAA,sCAIH,MAAOC,IAAP,IAAuB;AAC9B,UAAI;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAA,QAAAA,IAAI,CAACG,OAAL,CAAaC,CAAC,IAAI;AACd,eAAKC,WAAL,CAAiBD,CAAjB;AACH,SAFD;AAGH,OALD,CAKE,OAAOE,KAAP,EAAc;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH;AACJ,KAba;;AAAA,qCAoCKC,EAAD,IAAgB;AAC9B,aAAO,KAAKC,WAAL,CAAiBC,GAAjB,CAAqBF,EAArB,CAAP;AACH,KAtCa;;AAAA,yCAwCCH,CAAD,IAAY;AACtB,WAAKI,WAAL,CAAiBE,GAAjB,CAAqBN,CAAC,CAACG,EAAvB,EAA2BH,CAA3B;AACH,KA1Ca;;AACVR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAaD,MAAIe,WAAJ,GAAkB;AACd,QAAIC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKN,WAAhB,EAA6B,CAAC,CAACD,EAAD,EAAKQ,KAAL,CAAD,MAAkB;AAAER,MAAAA,EAAF;AAAMQ,MAAAA;AAAN,KAAlB,CAA7B,EACRC,IADQ,CACH,UAAUZ,CAAV,EAAaa,CAAb,EAAgB;AAClB,UAAIC,KAAK,GAAG,IAAIC,IAAJ,CAASf,CAAC,CAACW,KAAF,CAAQK,WAAjB,EAA8BC,OAA9B,EAAZ;AACA,UAAIC,KAAK,GAAG,IAAIH,IAAJ,CAASF,CAAC,CAACF,KAAF,CAAQK,WAAjB,EAA8BC,OAA9B,EAAZ;AACA,aAAOH,KAAK,GAAGI,KAAR,GAAgB,CAAhB,GAAoB,CAAC,CAA5B;AACH,KALQ,CAAb;AAMA,WAAOV,MAAP;AACH,GA1ByB,CA2B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAtC0B","sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Car, CarFormValues } from \"../models/car\";\r\n\r\nexport default class CarStore {\r\n    carRegistry = new Map<number, Car>();\r\n    loading = false\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    loadCars = async (cars: Car[]) => {\r\n        try {\r\n            console.log(cars);\r\n            cars.forEach(a => {\r\n                this.setActivity(a)\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    get groupedCars() {\r\n        var result = Array.from(this.carRegistry, ([id, value]) => ({ id, value }))\r\n            .sort(function (a, b) {\r\n                var dateA = new Date(a.value.createdDate).getTime();\r\n                var dateB = new Date(b.value.createdDate).getTime();\r\n                return dateA < dateB ? 1 : -1\r\n            });\r\n        return result\r\n    }\r\n    // deletePost = async (id: number) => {\r\n    //     try {\r\n    //         const post = await agent.Posts.delete(id);\r\n    //         runInAction(() => {\r\n    //             this.postRegistry.delete(id)\r\n    //         })\r\n    //         var profile = dark.profileStore.profile as User\r\n    //         profile.posts.length--\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n    private getPost = (id: number) => {\r\n        return this.carRegistry.get(id)\r\n    }\r\n\r\n    setActivity = (a: Car) => {\r\n        this.carRegistry.set(a.id, a);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}