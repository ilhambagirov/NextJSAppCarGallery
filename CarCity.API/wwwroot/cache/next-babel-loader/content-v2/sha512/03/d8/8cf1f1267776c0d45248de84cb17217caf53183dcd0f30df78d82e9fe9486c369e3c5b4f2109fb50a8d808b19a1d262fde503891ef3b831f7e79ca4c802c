{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from \"mobx\";\nexport default class CarStore {\n  constructor() {\n    _defineProperty(this, \"carRegistry\", new Map());\n\n    _defineProperty(this, \"loading\", false);\n\n    _defineProperty(this, \"loadCars\", async cars => {\n      try {\n        console.log(cars);\n        cars.forEach(a => {\n          this.setActivity(a);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"getPost\", id => {\n      return this.carRegistry.get(id);\n    });\n\n    _defineProperty(this, \"setActivity\", a => {\n      this.carRegistry.set(a.id, a);\n    });\n\n    makeAutoObservable(this);\n  }\n\n  get groupedCars() {\n    var result = Array.from(this.carRegistry, ([id, value]) => ({\n      id,\n      value\n    })).sort(function (a, b) {\n      var dateA = new Date(a.value.createdDate).getTime();\n      var dateB = new Date(b.value.createdDate).getTime();\n      return dateA < dateB ? 1 : -1;\n    });\n    return result;\n  } // deletePost = async (id: number) => {\n  //     try {\n  //         const post = await agent.Posts.delete(id);\n  //         runInAction(() => {\n  //             this.postRegistry.delete(id)\n  //         })\n  //         var profile = dark.profileStore.profile as User\n  //         profile.posts.length--\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n}","map":null,"metadata":{},"sourceType":"module"}