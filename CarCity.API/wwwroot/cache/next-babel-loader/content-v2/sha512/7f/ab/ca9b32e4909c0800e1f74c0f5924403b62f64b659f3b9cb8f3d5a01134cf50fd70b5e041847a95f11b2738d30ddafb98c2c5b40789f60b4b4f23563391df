{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert\";\n\nconst sleep = delay => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\nconsole.log(process.env.development);\naxios.interceptors.response.use(async response => {\n  // if (process.env.NODE_ENV === 'development') await sleep(0);\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      console.log(data);\n      swal(data.errors[Object.keys(data.errors)[0]][0], {\n        icon: \"error\"\n      }); // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\n\n      break;\n\n    case 401:\n      swal(\"Your are not logged in!\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 404:\n      // dark.commonStore.setServerError(data)\n      swal(\"Error ala\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 500:\n      // dark.commonStore.setServerError(data)\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error);\n});\n\nconst responseBody = response => response.data;\n\nconst request = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (id, body) => axios.put(id, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody)\n};\nconst Cars = {\n  getAll: () => request.get(`/Car/GetAllCars`),\n  get: id => request.get(`/Car/GetCar/${id}`),\n  create: post => request.post(`/Car/createCar`, post) // delete: (id: number) => request.delete<void>(`/home/posts/${id}`),\n\n};\nconst agent = {\n  Cars\n};\nexport default agent;","map":{"version":3,"sources":["C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/api/agent.ts"],"names":["axios","swal","sleep","delay","Promise","resolve","setTimeout","defaults","baseURL","process","env","REACT_APP_API_URL","console","log","development","interceptors","response","use","error","data","status","errors","Object","keys","icon","reject","responseBody","request","get","url","then","post","body","put","id","delete","Cars","getAll","create","agent"],"mappings":"AAAA,OAAOA,KAAP,MAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAGA,MAAMC,KAAK,GAAIC,KAAD,IAAmB;AAC7B,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BC,IAAAA,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAV;AACH,GAFM,CAAP;AAGH,CAJD;;AAMAH,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyBC,OAAO,CAACC,GAAR,CAAYC,iBAArC;AACAC,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACC,GAAR,CAAYI,WAAxB;AAEAd,KAAK,CAACe,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,MAAMD,QAAN,IAAkB;AAC9C;AACA,SAAOA,QAAP;AACH,CAHD,EAIKE,KAAD,IAAuB;AACnB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBF,KAAK,CAACF,QAA/B;;AACA,UAAQI,MAAR;AACI,SAAK,GAAL;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACAlB,MAAAA,IAAI,CAACkB,IAAI,CAACE,MAAL,CAAYC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACE,MAAjB,EAAyB,CAAzB,CAAZ,EAAyC,CAAzC,CAAD,EAA8C;AAC9CG,QAAAA,IAAI,EAAE;AADwC,OAA9C,CAAJ,CAFJ,CAKI;;AACA;;AACJ,SAAK,GAAL;AACIvB,MAAAA,IAAI,CAAC,yBAAD,EAA4B;AAC5BuB,QAAAA,IAAI,EAAE;AADsB,OAA5B,CAAJ;AAGA;;AACJ,SAAK,GAAL;AACI;AACAvB,MAAAA,IAAI,CAAC,WAAD,EAAc;AACduB,QAAAA,IAAI,EAAE;AADQ,OAAd,CAAJ;AAGA;;AACJ,SAAK,GAAL;AACI;AACA;;AACJ;AACI;AAvBR;;AAyBA,SAAOpB,OAAO,CAACqB,MAAR,CAAeP,KAAf,CAAP;AACH,CAhCL;;AAoCA,MAAMQ,YAAY,GAAOV,QAAJ,IAAmCA,QAAQ,CAACG,IAAjE;;AAGA,MAAMQ,OAAO,GAAG;AACZC,EAAAA,GAAG,EAAMC,GAAJ,IAAoB7B,KAAK,CAAC4B,GAAN,CAAaC,GAAb,EAAkBC,IAAlB,CAAuBJ,YAAvB,CADb;AAEZK,EAAAA,IAAI,EAAE,CAAIF,GAAJ,EAAiBG,IAAjB,KAA8BhC,KAAK,CAAC+B,IAAN,CAAcF,GAAd,EAAmBG,IAAnB,EAAyBF,IAAzB,CAA8BJ,YAA9B,CAFxB;AAGZO,EAAAA,GAAG,EAAE,CAAIC,EAAJ,EAAgBF,IAAhB,KAA6BhC,KAAK,CAACiC,GAAN,CAAaC,EAAb,EAAiBF,IAAjB,EAAuBF,IAAvB,CAA4BJ,YAA5B,CAHtB;AAIZS,EAAAA,MAAM,EAAMN,GAAJ,IAAoB7B,KAAK,CAACmC,MAAN,CAAgBN,GAAhB,EAAqBC,IAArB,CAA0BJ,YAA1B;AAJhB,CAAhB;AAMA,MAAMU,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE,MAAMV,OAAO,CAACC,GAAR,CAAoB,iBAApB,CADL;AAETA,EAAAA,GAAG,EAAGM,EAAD,IAAgBP,OAAO,CAACC,GAAR,CAAkB,eAAcM,EAAG,EAAnC,CAFZ;AAGTI,EAAAA,MAAM,EAAGP,IAAD,IAAyBJ,OAAO,CAACI,IAAR,CAAsB,gBAAtB,EAAuCA,IAAvC,CAHxB,CAIT;;AAJS,CAAb;AAOA,MAAMQ,KAAK,GAAG;AACVH,EAAAA;AADU,CAAd;AAGA,eAAeG,KAAf","sourcesContent":["import axios, { Axios, AxiosError, AxiosResponse } from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Car, CarFormValues } from \"../models/car\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\nconsole.log(process.env.development)\r\n\r\naxios.interceptors.response.use(async response => {\r\n    // if (process.env.NODE_ENV === 'development') await sleep(0);\r\n    return response;\r\n},\r\n    (error: AxiosError) => {\r\n        const { data, status } = error.response!\r\n        switch (status) {\r\n            case 400:\r\n                console.log(data)\r\n                swal(data.errors[Object.keys(data.errors)[0]][0], {\r\n                    icon: \"error\",\r\n                });\r\n                // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\r\n                break;\r\n            case 401:\r\n                swal(\"Your are not logged in!\", {\r\n                    icon: \"error\",\r\n                });\r\n                break;\r\n            case 404:\r\n                // dark.commonStore.setServerError(data)\r\n                swal(\"Error ala\", {\r\n                    icon: \"error\",\r\n                });\r\n                break;\r\n            case 500:\r\n                // dark.commonStore.setServerError(data)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data\r\n\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(id: string, body: {}) => axios.put<T>(id, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Cars = {\r\n    getAll: () => request.get<Car[]>(`/Car/GetAllCars`),\r\n    get: (id: number) => request.get<Car>(`/Car/GetCar/${id}`),\r\n    create: (post: CarFormValues) => request.post<number>(`/Car/createCar`, post),\r\n    // delete: (id: number) => request.delete<void>(`/home/posts/${id}`),\r\n}\r\n\r\nconst agent = {\r\n    Cars,\r\n}\r\nexport default agent"]},"metadata":{},"sourceType":"module"}