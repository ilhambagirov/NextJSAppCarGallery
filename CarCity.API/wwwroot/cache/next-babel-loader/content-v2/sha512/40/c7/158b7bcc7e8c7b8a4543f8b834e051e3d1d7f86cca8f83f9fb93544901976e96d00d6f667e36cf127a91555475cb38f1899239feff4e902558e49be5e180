{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport swal from \"sweetalert\";\n\nvar sleep = function sleep(delay) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = \"http://localhost:6680/api\";\naxios.interceptors.response.use( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", response);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  var _ref2 = error.response,\n      data = _ref2.data,\n      status = _ref2.status;\n\n  switch (status) {\n    case 400:\n      console.log(data);\n      swal(data.errors[Object.keys(data.errors)[0]][0], {\n        icon: \"error\"\n      }); // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\n\n      break;\n\n    case 401:\n      swal(\"Your are not logged in!\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 404:\n      // dark.commonStore.setServerError(data)\n      swal(\"Error ala\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 500:\n      // dark.commonStore.setServerError(data)\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error);\n});\n\nvar responseBody = function responseBody(response) {\n  return response.data;\n};\n\nvar request = {\n  get: function get(url) {\n    return axios.get(url).then(responseBody);\n  },\n  post: function post(url, body) {\n    return axios.post(url, body).then(responseBody);\n  },\n  put: function put(id, body) {\n    return axios.put(id, body).then(responseBody);\n  },\n  \"delete\": function _delete(url) {\n    return axios[\"delete\"](url).then(responseBody);\n  }\n};\nvar Cars = {\n  getAll: function getAll() {\n    return request.get(\"/Car/GetAllCars\");\n  },\n  get: function get(id) {\n    return request.get(\"/Car/GetCar/\".concat(id));\n  },\n  create: function create(post) {\n    return request.post(\"/Car/createCar\", post);\n  },\n  edit: function edit(post) {\n    return request.post(\"/Car/createCar\", post);\n  },\n  \"delete\": function _delete(id) {\n    return request[\"delete\"](\"/Car/deleteCar/\".concat(id));\n  }\n};\nvar CarTypes = {\n  getAll: function getAll() {\n    return request.get(\"CarType/GetAllCarTypes\");\n  }\n};\nvar agent = {\n  Cars: Cars,\n  CarTypes: CarTypes\n};\nexport default agent;","map":{"version":3,"sources":["C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/api/agent.ts"],"names":["axios","swal","sleep","delay","Promise","resolve","setTimeout","defaults","baseURL","interceptors","response","use","error","data","status","console","log","errors","Object","keys","icon","reject","responseBody","request","get","url","then","post","body","put","id","Cars","getAll","create","edit","CarTypes","agent"],"mappings":"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","sourcesContent":["import axios, { Axios, AxiosError, AxiosResponse } from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Car, CarFormValues } from \"../models/car\";\r\nimport { CarType } from \"../models/carType\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = \"http://localhost:6680/api\";\r\n\r\naxios.interceptors.response.use(\r\n  async (response) => {\r\n    // if (process.env.NODE_ENV === 'development') await sleep(0);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status } = error.response!;\r\n    switch (status) {\r\n      case 400:\r\n        console.log(data);\r\n        swal(data.errors[Object.keys(data.errors)[0]][0], {\r\n          icon: \"error\",\r\n        });\r\n        // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\r\n        break;\r\n      case 401:\r\n        swal(\"Your are not logged in!\", {\r\n          icon: \"error\",\r\n        });\r\n        break;\r\n      case 404:\r\n        // dark.commonStore.setServerError(data)\r\n        swal(\"Error ala\", {\r\n          icon: \"error\",\r\n        });\r\n        break;\r\n      case 500:\r\n        // dark.commonStore.setServerError(data)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(id: string, body: {}) => axios.put<T>(id, body).then(responseBody),\r\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\nconst Cars = {\r\n  getAll: () => request.get<Car[]>(`/Car/GetAllCars`),\r\n  get: (id: number) => request.get<Car>(`/Car/GetCar/${id}`),\r\n  create: (post: CarFormValues) => request.post<number>(`/Car/createCar`, post),\r\n  edit: (post: CarFormValues) => request.post<number>(`/Car/createCar`, post),\r\n  delete: (id: number) => request.delete<void>(`/Car/deleteCar/${id}`),\r\n};\r\nconst CarTypes = {\r\n  getAll: () => request.get<CarType[]>(`CarType/GetAllCarTypes`),\r\n};\r\n\r\nconst agent = {\r\n  Cars,\r\n  CarTypes\r\n};\r\nexport default agent;\r\n"]},"metadata":{},"sourceType":"module"}