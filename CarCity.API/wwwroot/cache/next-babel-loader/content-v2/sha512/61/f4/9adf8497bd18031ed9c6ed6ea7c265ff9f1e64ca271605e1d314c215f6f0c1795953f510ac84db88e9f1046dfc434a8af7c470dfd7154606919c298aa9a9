{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert\";\n\nconst sleep = delay => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = \"http://localhost:6680/api\";\naxios.interceptors.response.use(async response => {\n  // if (process.env.NODE_ENV === 'development') await sleep(0);\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      console.log(data);\n      swal(data.errors[Object.keys(data.errors)[0]][0], {\n        icon: \"error\"\n      }); // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\n\n      break;\n\n    case 401:\n      swal(\"Your are not logged in!\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 404:\n      // dark.commonStore.setServerError(data)\n      swal(\"Error ala\", {\n        icon: \"error\"\n      });\n      break;\n\n    case 500:\n      // dark.commonStore.setServerError(data)\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error);\n});\n\nconst responseBody = response => response.data;\n\nconst request = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (id, body) => axios.put(id, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody)\n};\nconst Cars = {\n  getAll: () => request.get(`/Car/GetAllCars`),\n  get: id => request.get(`/Car/GetCar/${id}`),\n  create: post => request.post(`/Car/createCar`, post),\n  edit: (id, post) => request.put(`/Car/updateCar/${id}`, post),\n  delete: id => request.delete(`/Car/deleteCar/${id}`),\n  search: word => request.delete(`/Car/searchCars${word}`)\n};\nconst CarTypes = {\n  getAll: () => request.get(`CarType/GetAllCarTypes`)\n};\nconst agent = {\n  Cars,\n  CarTypes\n};\nexport default agent;","map":{"version":3,"sources":["C:/Users/ilham.baghirov/Desktop/nextCarGallery/NextJSAppCarGallery/NextJSAppCarGallery/api/agent.ts"],"names":["axios","swal","sleep","delay","Promise","resolve","setTimeout","defaults","baseURL","interceptors","response","use","error","data","status","console","log","errors","Object","keys","icon","reject","responseBody","request","get","url","then","post","body","put","id","delete","Cars","getAll","create","edit","search","word","CarTypes","agent"],"mappings":"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","sourcesContent":["import axios, { Axios, AxiosError, AxiosResponse } from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Car, CarFormValues } from \"../models/car\";\r\nimport { CarType } from \"../models/carType\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = \"http://localhost:6680/api\";\r\n\r\naxios.interceptors.response.use(\r\n  async (response) => {\r\n    // if (process.env.NODE_ENV === 'development') await sleep(0);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status } = error.response!;\r\n    switch (status) {\r\n      case 400:\r\n        console.log(data);\r\n        swal(data.errors[Object.keys(data.errors)[0]][0], {\r\n          icon: \"error\",\r\n        });\r\n        // dark.userStore.errorData = data.errors[Object.keys(data.errors)[0]][0]\r\n        break;\r\n      case 401:\r\n        swal(\"Your are not logged in!\", {\r\n          icon: \"error\",\r\n        });\r\n        break;\r\n      case 404:\r\n        // dark.commonStore.setServerError(data)\r\n        swal(\"Error ala\", {\r\n          icon: \"error\",\r\n        });\r\n        break;\r\n      case 500:\r\n        // dark.commonStore.setServerError(data)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(id: string, body: {}) => axios.put<T>(id, body).then(responseBody),\r\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\nconst Cars = {\r\n  getAll: () => request.get<Car[]>(`/Car/GetAllCars`),\r\n  get: (id: number) => request.get<Car>(`/Car/GetCar/${id}`),\r\n  create: (post: CarFormValues) => request.post<number>(`/Car/createCar`, post),\r\n  edit: (id: number, post: CarFormValues) =>\r\n    request.put<void>(`/Car/updateCar/${id}`, post),\r\n  delete: (id: number) => request.delete<void>(`/Car/deleteCar/${id}`),\r\n  search: (word: string) => request.delete<void>(`/Car/searchCars${word}`),\r\n};\r\nconst CarTypes = {\r\n  getAll: () => request.get<CarType[]>(`CarType/GetAllCarTypes`),\r\n};\r\n\r\nconst agent = {\r\n  Cars,\r\n  CarTypes,\r\n};\r\nexport default agent;\r\n"]},"metadata":{},"sourceType":"module"}